// Code generated by protoc-gen-go. DO NOT EDIT.
// source: controllers.proto

package controllers

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type User struct {
	FirstName            string   `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string   `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Email                string   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_fad12f42efe8f126, []int{0}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *User) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type GetDeleteUserRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDeleteUserRequest) Reset()         { *m = GetDeleteUserRequest{} }
func (m *GetDeleteUserRequest) String() string { return proto.CompactTextString(m) }
func (*GetDeleteUserRequest) ProtoMessage()    {}
func (*GetDeleteUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fad12f42efe8f126, []int{1}
}

func (m *GetDeleteUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDeleteUserRequest.Unmarshal(m, b)
}
func (m *GetDeleteUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDeleteUserRequest.Marshal(b, m, deterministic)
}
func (m *GetDeleteUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDeleteUserRequest.Merge(m, src)
}
func (m *GetDeleteUserRequest) XXX_Size() int {
	return xxx_messageInfo_GetDeleteUserRequest.Size(m)
}
func (m *GetDeleteUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDeleteUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDeleteUserRequest proto.InternalMessageInfo

func (m *GetDeleteUserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UpdateUserRequest struct {
	UserIdForUpdate      string   `protobuf:"bytes,1,opt,name=user_id_for_update,json=userIdForUpdate,proto3" json:"user_id_for_update,omitempty"`
	FirstName            string   `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string   `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Email                string   `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateUserRequest) Reset()         { *m = UpdateUserRequest{} }
func (m *UpdateUserRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateUserRequest) ProtoMessage()    {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fad12f42efe8f126, []int{2}
}

func (m *UpdateUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateUserRequest.Unmarshal(m, b)
}
func (m *UpdateUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateUserRequest.Marshal(b, m, deterministic)
}
func (m *UpdateUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserRequest.Merge(m, src)
}
func (m *UpdateUserRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateUserRequest.Size(m)
}
func (m *UpdateUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserRequest proto.InternalMessageInfo

func (m *UpdateUserRequest) GetUserIdForUpdate() string {
	if m != nil {
		return m.UserIdForUpdate
	}
	return ""
}

func (m *UpdateUserRequest) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UpdateUserRequest) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UpdateUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type OutPut struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OutPut) Reset()         { *m = OutPut{} }
func (m *OutPut) String() string { return proto.CompactTextString(m) }
func (*OutPut) ProtoMessage()    {}
func (*OutPut) Descriptor() ([]byte, []int) {
	return fileDescriptor_fad12f42efe8f126, []int{3}
}

func (m *OutPut) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutPut.Unmarshal(m, b)
}
func (m *OutPut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutPut.Marshal(b, m, deterministic)
}
func (m *OutPut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutPut.Merge(m, src)
}
func (m *OutPut) XXX_Size() int {
	return xxx_messageInfo_OutPut.Size(m)
}
func (m *OutPut) XXX_DiscardUnknown() {
	xxx_messageInfo_OutPut.DiscardUnknown(m)
}

var xxx_messageInfo_OutPut proto.InternalMessageInfo

func (m *OutPut) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetAllUserRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllUserRequest) Reset()         { *m = GetAllUserRequest{} }
func (m *GetAllUserRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllUserRequest) ProtoMessage()    {}
func (*GetAllUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fad12f42efe8f126, []int{4}
}

func (m *GetAllUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllUserRequest.Unmarshal(m, b)
}
func (m *GetAllUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllUserRequest.Marshal(b, m, deterministic)
}
func (m *GetAllUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllUserRequest.Merge(m, src)
}
func (m *GetAllUserRequest) XXX_Size() int {
	return xxx_messageInfo_GetAllUserRequest.Size(m)
}
func (m *GetAllUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllUserRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*User)(nil), "controllers.User")
	proto.RegisterType((*GetDeleteUserRequest)(nil), "controllers.GetDeleteUserRequest")
	proto.RegisterType((*UpdateUserRequest)(nil), "controllers.UpdateUserRequest")
	proto.RegisterType((*OutPut)(nil), "controllers.OutPut")
	proto.RegisterType((*GetAllUserRequest)(nil), "controllers.GetAllUserRequest")
}

func init() { proto.RegisterFile("controllers.proto", fileDescriptor_fad12f42efe8f126) }

var fileDescriptor_fad12f42efe8f126 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x41, 0x4b, 0xf3, 0x30,
	0x18, 0xc7, 0xdf, 0x75, 0x7b, 0x37, 0xf7, 0x08, 0x93, 0x66, 0x3b, 0x0c, 0x45, 0xd1, 0x1e, 0x44,
	0x10, 0x76, 0xd8, 0x3e, 0xc1, 0x50, 0x37, 0xbc, 0xa8, 0x4c, 0x06, 0x03, 0x0f, 0x25, 0x2e, 0xcf,
	0x24, 0x90, 0x2e, 0x33, 0x49, 0xfd, 0x20, 0x7e, 0x62, 0x69, 0xd6, 0x92, 0xb4, 0x5a, 0x2f, 0x1e,
	0xf3, 0xfb, 0x27, 0xff, 0xe7, 0xd7, 0x36, 0x85, 0x70, 0x2d, 0xb7, 0x46, 0x49, 0x21, 0x50, 0xe9,
	0xd1, 0x4e, 0x49, 0x23, 0xc9, 0xa1, 0x87, 0xa2, 0x15, 0xb4, 0x96, 0x1a, 0x15, 0x39, 0x05, 0xd8,
	0x70, 0xa5, 0x4d, 0xbc, 0xa5, 0x09, 0x0e, 0x1b, 0xe7, 0x8d, 0xab, 0xee, 0xa2, 0x6b, 0xc9, 0x03,
	0x4d, 0x90, 0x9c, 0x40, 0x57, 0xd0, 0x22, 0x0d, 0x6c, 0x7a, 0x90, 0x01, 0x1b, 0x0e, 0xe0, 0x3f,
	0x26, 0x94, 0x8b, 0x61, 0xd3, 0x06, 0xfb, 0x45, 0x74, 0x09, 0x83, 0x39, 0x9a, 0x5b, 0x14, 0x68,
	0x30, 0x1b, 0xb1, 0xc0, 0xf7, 0x14, 0xb5, 0x21, 0x3d, 0x08, 0x38, 0xcb, 0x27, 0x04, 0x9c, 0x45,
	0x9f, 0x0d, 0x08, 0x97, 0x3b, 0x46, 0xcb, 0xbb, 0xae, 0x81, 0xa4, 0x1a, 0x55, 0xcc, 0x59, 0xbc,
	0x91, 0x2a, 0x4e, 0xed, 0x86, 0xfc, 0xd4, 0x51, 0x96, 0xdc, 0xb3, 0x99, 0x54, 0xfb, 0x73, 0x15,
	0xf9, 0xe0, 0x57, 0xf9, 0x66, 0x9d, 0x7c, 0xcb, 0x97, 0x8f, 0xa0, 0xfd, 0x98, 0x9a, 0xa7, 0xd4,
	0x90, 0x21, 0x74, 0x12, 0xd4, 0x9a, 0xbe, 0x15, 0xd3, 0x8b, 0x65, 0xd4, 0x87, 0x70, 0x8e, 0x66,
	0x2a, 0x84, 0xe7, 0x3d, 0xbe, 0x83, 0xde, 0x94, 0xb1, 0x8c, 0x3c, 0xa3, 0xfa, 0xe0, 0x6b, 0x24,
	0x13, 0xe8, 0xe4, 0x84, 0x84, 0x23, 0xff, 0x6b, 0x64, 0xe8, 0xb8, 0x5f, 0x42, 0xfb, 0x99, 0xd1,
	0xbf, 0xf1, 0x12, 0x7a, 0x73, 0x34, 0x7e, 0xcd, 0x0d, 0x74, 0x72, 0x42, 0x2e, 0x4a, 0x67, 0x7e,
	0x7a, 0xc9, 0x75, 0xb5, 0x2b, 0x5f, 0xd9, 0x35, 0x83, 0x83, 0xe4, 0xac, 0x5a, 0x5e, 0x7e, 0xc0,
	0xba, 0xe6, 0x17, 0x08, 0x9d, 0x45, 0xd1, 0x3c, 0x03, 0x70, 0xf0, 0x6f, 0xda, 0xee, 0x86, 0x78,
	0xda, 0x0e, 0x56, 0xb4, 0xbf, 0xdd, 0xa7, 0x9a, 0xe6, 0xd7, 0xb6, 0xfd, 0x25, 0x26, 0x5f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x40, 0xba, 0xf8, 0xab, 0x27, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AddUserServiceClient is the client API for AddUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AddUserServiceClient interface {
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*OutPut, error)
}

type addUserServiceClient struct {
	cc *grpc.ClientConn
}

func NewAddUserServiceClient(cc *grpc.ClientConn) AddUserServiceClient {
	return &addUserServiceClient{cc}
}

func (c *addUserServiceClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*OutPut, error) {
	out := new(OutPut)
	err := c.cc.Invoke(ctx, "/controllers.AddUserService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddUserServiceServer is the server API for AddUserService service.
type AddUserServiceServer interface {
	AddUser(context.Context, *User) (*OutPut, error)
}

// UnimplementedAddUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAddUserServiceServer struct {
}

func (*UnimplementedAddUserServiceServer) AddUser(ctx context.Context, req *User) (*OutPut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}

func RegisterAddUserServiceServer(s *grpc.Server, srv AddUserServiceServer) {
	s.RegisterService(&_AddUserService_serviceDesc, srv)
}

func _AddUserService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddUserServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controllers.AddUserService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddUserServiceServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

var _AddUserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "controllers.AddUserService",
	HandlerType: (*AddUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _AddUserService_AddUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controllers.proto",
}

// GetUserServiceClient is the client API for GetUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GetUserServiceClient interface {
	GetUser(ctx context.Context, in *GetDeleteUserRequest, opts ...grpc.CallOption) (*OutPut, error)
}

type getUserServiceClient struct {
	cc *grpc.ClientConn
}

func NewGetUserServiceClient(cc *grpc.ClientConn) GetUserServiceClient {
	return &getUserServiceClient{cc}
}

func (c *getUserServiceClient) GetUser(ctx context.Context, in *GetDeleteUserRequest, opts ...grpc.CallOption) (*OutPut, error) {
	out := new(OutPut)
	err := c.cc.Invoke(ctx, "/controllers.GetUserService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetUserServiceServer is the server API for GetUserService service.
type GetUserServiceServer interface {
	GetUser(context.Context, *GetDeleteUserRequest) (*OutPut, error)
}

// UnimplementedGetUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGetUserServiceServer struct {
}

func (*UnimplementedGetUserServiceServer) GetUser(ctx context.Context, req *GetDeleteUserRequest) (*OutPut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}

func RegisterGetUserServiceServer(s *grpc.Server, srv GetUserServiceServer) {
	s.RegisterService(&_GetUserService_serviceDesc, srv)
}

func _GetUserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetUserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controllers.GetUserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetUserServiceServer).GetUser(ctx, req.(*GetDeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetUserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "controllers.GetUserService",
	HandlerType: (*GetUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _GetUserService_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controllers.proto",
}

// GetAllUserServiceClient is the client API for GetAllUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GetAllUserServiceClient interface {
	GetAllUser(ctx context.Context, in *GetAllUserRequest, opts ...grpc.CallOption) (*OutPut, error)
}

type getAllUserServiceClient struct {
	cc *grpc.ClientConn
}

func NewGetAllUserServiceClient(cc *grpc.ClientConn) GetAllUserServiceClient {
	return &getAllUserServiceClient{cc}
}

func (c *getAllUserServiceClient) GetAllUser(ctx context.Context, in *GetAllUserRequest, opts ...grpc.CallOption) (*OutPut, error) {
	out := new(OutPut)
	err := c.cc.Invoke(ctx, "/controllers.GetAllUserService/GetAllUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetAllUserServiceServer is the server API for GetAllUserService service.
type GetAllUserServiceServer interface {
	GetAllUser(context.Context, *GetAllUserRequest) (*OutPut, error)
}

// UnimplementedGetAllUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGetAllUserServiceServer struct {
}

func (*UnimplementedGetAllUserServiceServer) GetAllUser(ctx context.Context, req *GetAllUserRequest) (*OutPut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUser not implemented")
}

func RegisterGetAllUserServiceServer(s *grpc.Server, srv GetAllUserServiceServer) {
	s.RegisterService(&_GetAllUserService_serviceDesc, srv)
}

func _GetAllUserService_GetAllUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetAllUserServiceServer).GetAllUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controllers.GetAllUserService/GetAllUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetAllUserServiceServer).GetAllUser(ctx, req.(*GetAllUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetAllUserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "controllers.GetAllUserService",
	HandlerType: (*GetAllUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllUser",
			Handler:    _GetAllUserService_GetAllUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controllers.proto",
}

// DeleteUserServiceClient is the client API for DeleteUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeleteUserServiceClient interface {
	DeleteUser(ctx context.Context, in *GetDeleteUserRequest, opts ...grpc.CallOption) (*OutPut, error)
}

type deleteUserServiceClient struct {
	cc *grpc.ClientConn
}

func NewDeleteUserServiceClient(cc *grpc.ClientConn) DeleteUserServiceClient {
	return &deleteUserServiceClient{cc}
}

func (c *deleteUserServiceClient) DeleteUser(ctx context.Context, in *GetDeleteUserRequest, opts ...grpc.CallOption) (*OutPut, error) {
	out := new(OutPut)
	err := c.cc.Invoke(ctx, "/controllers.DeleteUserService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeleteUserServiceServer is the server API for DeleteUserService service.
type DeleteUserServiceServer interface {
	DeleteUser(context.Context, *GetDeleteUserRequest) (*OutPut, error)
}

// UnimplementedDeleteUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDeleteUserServiceServer struct {
}

func (*UnimplementedDeleteUserServiceServer) DeleteUser(ctx context.Context, req *GetDeleteUserRequest) (*OutPut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}

func RegisterDeleteUserServiceServer(s *grpc.Server, srv DeleteUserServiceServer) {
	s.RegisterService(&_DeleteUserService_serviceDesc, srv)
}

func _DeleteUserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleteUserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controllers.DeleteUserService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleteUserServiceServer).DeleteUser(ctx, req.(*GetDeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeleteUserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "controllers.DeleteUserService",
	HandlerType: (*DeleteUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteUser",
			Handler:    _DeleteUserService_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controllers.proto",
}

// UpdateUserServiceClient is the client API for UpdateUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpdateUserServiceClient interface {
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*OutPut, error)
}

type updateUserServiceClient struct {
	cc *grpc.ClientConn
}

func NewUpdateUserServiceClient(cc *grpc.ClientConn) UpdateUserServiceClient {
	return &updateUserServiceClient{cc}
}

func (c *updateUserServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*OutPut, error) {
	out := new(OutPut)
	err := c.cc.Invoke(ctx, "/controllers.UpdateUserService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateUserServiceServer is the server API for UpdateUserService service.
type UpdateUserServiceServer interface {
	UpdateUser(context.Context, *UpdateUserRequest) (*OutPut, error)
}

// UnimplementedUpdateUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUpdateUserServiceServer struct {
}

func (*UnimplementedUpdateUserServiceServer) UpdateUser(ctx context.Context, req *UpdateUserRequest) (*OutPut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}

func RegisterUpdateUserServiceServer(s *grpc.Server, srv UpdateUserServiceServer) {
	s.RegisterService(&_UpdateUserService_serviceDesc, srv)
}

func _UpdateUserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateUserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controllers.UpdateUserService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateUserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpdateUserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "controllers.UpdateUserService",
	HandlerType: (*UpdateUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUser",
			Handler:    _UpdateUserService_UpdateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controllers.proto",
}
